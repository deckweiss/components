{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "data-table",
	"title": "DataTable",
	"type": "registry:block",
	"description": "Fully functional data table with sort, filter, column toggle, row select and pagination",
	"dependencies": [
		"@tanstack/table-core",
		"@lucide/svelte"
	],
	"devDependencies": [
		"@lucide/svelte@^0.515.0"
	],
	"registryDependencies": [
		"badge",
		"button",
		"checkbox",
		"command",
		"data-table",
		"dropdown-menu",
		"popover",
		"select",
		"table"
	],
	"files": [
		{
			"content": "export { default as DataTableToolbar } from \"./data-table-toolbar.svelte\";\nexport { default as DataTableViewOptions } from \"./data-table-view-options.svelte\";\nexport { default as DataTableFacetedFilter } from \"./data-table-faceted-filter.svelte\";\n",
			"type": "registry:file",
			"target": "data-table/index.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport {\n\t\ttype ColumnDef,\n\t\ttype ColumnFiltersState,\n\t\ttype PaginationState,\n\t\ttype Row,\n\t\ttype RowSelectionState,\n\t\ttype SortingState,\n\t\ttype VisibilityState,\n\t\ttype Table as TableType,\n\t\tgetCoreRowModel,\n\t\tgetFacetedRowModel,\n\t\tgetFacetedUniqueValues,\n\t\tgetFilteredRowModel,\n\t\tgetPaginationRowModel,\n\t\tgetSortedRowModel,\n\t\ttype Column,\n\t\ttype InitialTableState,\n\t\ttype ExpandedState,\n\t\tgetExpandedRowModel,\n\t} from \"@tanstack/table-core\";\n\timport DataTableToolbar from \"./data-table-toolbar.svelte\";\n\timport { createSvelteTable } from \"$lib/components/ui/data-table/data-table.svelte\";\n\timport FlexRender from \"$lib/components/ui/data-table/flex-render.svelte\";\n\timport * as Table from \"$lib/components/ui/table\";\n\timport * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n\timport { renderComponent, renderSnippet } from \"$lib/components/ui/data-table/render-helpers\";\n\timport { Button, buttonVariants } from \"$lib/components/ui/button\";\n\timport ChevronRightIcon from \"@lucide/svelte/icons/chevron-right\";\n\timport ChevronLeftIcon from \"@lucide/svelte/icons/chevron-left\";\n\timport ChevronsLeftIcon from \"@lucide/svelte/icons/chevrons-left\";\n\timport ChevronsRightIcon from \"@lucide/svelte/icons/chevrons-right\";\n\timport ArrowUpIcon from \"@lucide/svelte/icons/arrow-up\";\n\timport ArrowDownIcon from \"@lucide/svelte/icons/arrow-down\";\n\timport ChevronsUpDownIcon from \"@lucide/svelte/icons/chevrons-up-down\";\n\timport EyeOffIcon from \"@lucide/svelte/icons/eye-off\";\n\timport * as Select from \"$lib/components/ui/select\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { cn } from \"$UTILS$.js\";\n\timport Checkbox from \"$lib/components/ui/checkbox/checkbox.svelte\";\n\timport type { Snippet } from \"svelte\";\n\n\tlet {\n\t\tdata,\n\t\tcolumns,\n\t\tonRowClick,\n\t\tinitialState,\n\t\trowSelection = $bindable({}),\n\t\tenableRowSelection = false,\n\t\tenableExpanding = false,\n\t\texpanded = $bindable({}),\n\t\texpandedRow,\n\t\tenablePagination,\n\t\tcellClasses = \"py-2\",\n\t}: {\n\t\tdata: TData[];\n\t\tcolumns: ColumnDef<TData>[];\n\t\tonRowClick?: (row: Row<TData>) => void;\n\t\tinitialState?: InitialTableState;\n\t\trowSelection?: Record<string, boolean>;\n\t\tenableRowSelection?: boolean;\n\t\tenableExpanding?: boolean;\n\t\texpanded?: ExpandedState;\n\t\texpandedRow?: Snippet<[Row<TData>]>;\n\t\tenablePagination?: boolean;\n\t\tcellClasses?: string;\n\t} = $props();\n\n\tlet columnVisibility = $state<VisibilityState>({});\n\tlet columnFilters = $state<ColumnFiltersState>([]);\n\tlet sorting = $state<SortingState>(initialState?.sorting ?? []);\n\tlet pagination = $state<PaginationState>({ pageIndex: 0, pageSize: 10 });\n\n\tconst table = createSvelteTable({\n\t\tget data() {\n\t\t\treturn data;\n\t\t},\n\t\tstate: {\n\t\t\tget sorting() {\n\t\t\t\treturn sorting;\n\t\t\t},\n\t\t\tget columnVisibility() {\n\t\t\t\treturn columnVisibility;\n\t\t\t},\n\t\t\tget rowSelection() {\n\t\t\t\treturn rowSelection;\n\t\t\t},\n\t\t\tget columnFilters() {\n\t\t\t\treturn columnFilters;\n\t\t\t},\n\t\t\tget pagination() {\n\t\t\t\treturn enablePagination ? pagination : { pageIndex: 0, pageSize: Infinity };\n\t\t\t},\n\t\t\tget expanded() {\n\t\t\t\treturn expanded;\n\t\t\t},\n\t\t},\n\t\tinitialState,\n\t\tenableExpanding,\n\t\tcolumns: enableRowSelection\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"select\",\n\t\t\t\t\t\theader: ({ table }) =>\n\t\t\t\t\t\t\trenderComponent(Checkbox, {\n\t\t\t\t\t\t\t\tchecked: table.getIsAllPageRowsSelected(),\n\t\t\t\t\t\t\t\tonCheckedChange: (value) => table.toggleAllPageRowsSelected(value),\n\t\t\t\t\t\t\t\tindeterminate:\n\t\t\t\t\t\t\t\t\ttable.getIsSomePageRowsSelected() && !table.getIsAllPageRowsSelected(),\n\t\t\t\t\t\t\t\t\"aria-label\": \"Select all\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tcell: ({ row }) =>\n\t\t\t\t\t\t\trenderComponent(Checkbox, {\n\t\t\t\t\t\t\t\tchecked: row.getIsSelected(),\n\t\t\t\t\t\t\t\tonclick: (event) => {\n\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonCheckedChange: (value) => row.toggleSelected(value),\n\t\t\t\t\t\t\t\t\"aria-label\": \"Select row\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tenableSorting: false,\n\t\t\t\t\t\tenableHiding: false,\n\t\t\t\t\t},\n\t\t\t\t\t...columns,\n\t\t\t\t]\n\t\t\t: columns,\n\t\tenableRowSelection,\n\t\tonExpandedChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\texpanded = updater(expanded);\n\t\t\t} else {\n\t\t\t\texpanded = updater;\n\t\t\t}\n\t\t},\n\t\tonRowSelectionChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\trowSelection = updater(rowSelection);\n\t\t\t} else {\n\t\t\t\trowSelection = updater;\n\t\t\t}\n\t\t},\n\t\tonSortingChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tsorting = updater(sorting);\n\t\t\t} else {\n\t\t\t\tsorting = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnFiltersChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnFilters = updater(columnFilters);\n\t\t\t} else {\n\t\t\t\tcolumnFilters = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnVisibilityChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnVisibility = updater(columnVisibility);\n\t\t\t} else {\n\t\t\t\tcolumnVisibility = updater;\n\t\t\t}\n\t\t},\n\t\tonPaginationChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tpagination = updater(pagination);\n\t\t\t} else {\n\t\t\t\tpagination = updater;\n\t\t\t}\n\t\t},\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t\tgetFilteredRowModel: getFilteredRowModel(),\n\t\tgetPaginationRowModel: enablePagination ? getPaginationRowModel() : undefined,\n\t\tgetSortedRowModel: getSortedRowModel(),\n\t\tgetFacetedRowModel: getFacetedRowModel(),\n\t\tgetFacetedUniqueValues: getFacetedUniqueValues(),\n\t\tgetExpandedRowModel: getExpandedRowModel(),\n\t});\n</script>\n\n{#snippet Pagination({ table }: { table: TableType<TData> })}\n\t<div class=\"flex items-center justify-between px-2\">\n\t\t<div class=\"text-muted-foreground flex-1 text-sm\">\n\t\t\t{#if table.options.enableRowSelection}\n\t\t\t\t{table.getFilteredSelectedRowModel().rows.length} von\n\t\t\t\t{table.getFilteredRowModel().rows.length} Zeile(n) ausgew√§hlt\n\t\t\t{/if}\n\t\t</div>\n\t\t<div class=\"flex items-center space-x-6 lg:space-x-8\">\n\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t<p class=\"text-sm font-medium\">Zeilen pro Seite</p>\n\t\t\t\t<Select.Root\n\t\t\t\t\tallowDeselect={false}\n\t\t\t\t\ttype=\"single\"\n\t\t\t\t\tvalue={`${table.getState().pagination.pageSize}`}\n\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\ttable.setPageSize(Number(value));\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Select.Trigger class=\"h-8 w-[70px]\">\n\t\t\t\t\t\t{String(table.getState().pagination.pageSize)}\n\t\t\t\t\t</Select.Trigger>\n\t\t\t\t\t<Select.Content side=\"top\">\n\t\t\t\t\t\t{#each [10, 20, 30, 40, 50] as pageSize (pageSize)}\n\t\t\t\t\t\t\t<Select.Item value={`${pageSize}`}>\n\t\t\t\t\t\t\t\t{pageSize}\n\t\t\t\t\t\t\t</Select.Item>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Select.Content>\n\t\t\t\t</Select.Root>\n\t\t\t</div>\n\t\t\t<div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n\t\t\t\tSeite {table.getState().pagination.pageIndex + 1} von\n\t\t\t\t{table.getPageCount()}\n\t\t\t</div>\n\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\t\tonclick={() => table.setPageIndex(0)}\n\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to first page</span>\n\t\t\t\t\t<ChevronsLeftIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\t\tonclick={() => table.previousPage()}\n\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to previous page</span>\n\t\t\t\t\t<ChevronLeftIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\t\tonclick={() => table.nextPage()}\n\t\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to next page</span>\n\t\t\t\t\t<ChevronRightIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\t\tonclick={() => table.setPageIndex(table.getPageCount() - 1)}\n\t\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to last page</span>\n\t\t\t\t\t<ChevronsRightIcon />\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/snippet}\n\n{#snippet ColumnHeader({\n\tcolumn,\n\ttitle,\n\tclass: className,\n\t...restProps\n}: { column: Column<TData>; title: string } & HTMLAttributes<HTMLDivElement>)}\n\t{#if !((column.columnDef.enableSorting && column?.getCanSort()) || (column.getCanHide() && column.columnDef.enableHiding))}\n\t\t<div class={className} {...restProps}>\n\t\t\t{title}\n\t\t</div>\n\t{:else}\n\t\t<div class={cn(\"flex items-center\", className)} {...restProps}>\n\t\t\t<DropdownMenu.Root>\n\t\t\t\t<DropdownMenu.Trigger class={buttonVariants({ size: \"sm\", variant: \"ghost\" })}\n\t\t\t\t\t>{#snippet children()}\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{#if column.getIsSorted() === \"desc\"}\n\t\t\t\t\t\t\t<ArrowDownIcon />\n\t\t\t\t\t\t{:else if column.getIsSorted() === \"asc\"}\n\t\t\t\t\t\t\t<ArrowUpIcon />\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<ChevronsUpDownIcon />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/snippet}\n\t\t\t\t</DropdownMenu.Trigger>\n\t\t\t\t<DropdownMenu.Content align=\"start\">\n\t\t\t\t\t{#if column.columnDef.enableSorting && column.getCanSort()}\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleSorting(false)}>\n\t\t\t\t\t\t\t<ArrowUpIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAufsteigend\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleSorting(true)}>\n\t\t\t\t\t\t\t<ArrowDownIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAbsteigend\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if column.columnDef.enableSorting && column.getCanSort() && column.columnDef.enableHiding && column.getCanHide()}\n\t\t\t\t\t\t<DropdownMenu.Separator />\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if column.columnDef.enableHiding && column.getCanHide()}\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleVisibility(false)}>\n\t\t\t\t\t\t\t<EyeOffIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAusblenden\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t{/if}\n\t\t\t\t</DropdownMenu.Content>\n\t\t\t</DropdownMenu.Root>\n\t\t</div>\n\t{/if}\n{/snippet}\n\n<div class=\"flex flex-col space-y-4\">\n\t<DataTableToolbar {table} />\n\t<div class=\"overflow-x-auto rounded-md border\">\n\t\t<Table.Root>\n\t\t\t<Table.Header>\n\t\t\t\t{#each table.getHeaderGroups() as headerGroup (headerGroup.id)}\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t{#each headerGroup.headers as header (header.id)}\n\t\t\t\t\t\t\t<Table.Head colspan={header.colSpan}>\n\t\t\t\t\t\t\t\t{#if !header.isPlaceholder}\n\t\t\t\t\t\t\t\t\t{#if header.column.columnDef.header instanceof Function}\n\t\t\t\t\t\t\t\t\t\t<FlexRender\n\t\t\t\t\t\t\t\t\t\t\tcontent={header.column.columnDef.header}\n\t\t\t\t\t\t\t\t\t\t\tcontext={header.getContext()}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t\t\t<FlexRender\n\t\t\t\t\t\t\t\t\t\t\tcontent={() =>\n\t\t\t\t\t\t\t\t\t\t\t\trenderSnippet(ColumnHeader, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn: header.column,\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: header.column.columnDef.header as string,\n\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\tcontext={header.getContext()}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t</Table.Head>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Table.Row>\n\t\t\t\t{/each}\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{#each table.getRowModel().rows as row (row.id)}\n\t\t\t\t\t<Table.Row\n\t\t\t\t\t\tclass={onRowClick ? \"cursor-pointer\" : \"\"}\n\t\t\t\t\t\tonclick={() => {\n\t\t\t\t\t\t\tonRowClick?.(row);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdata-state={row.getIsSelected() && \"selected\"}\n\t\t\t\t\t>\n\t\t\t\t\t\t{#each row.getVisibleCells() as cell (cell.id)}\n\t\t\t\t\t\t\t<Table.Cell class={cellClasses}>\n\t\t\t\t\t\t\t\t<FlexRender content={cell.column.columnDef.cell} context={cell.getContext()} />\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Table.Row>\n\n\t\t\t\t\t{#if row.getIsExpanded()}\n\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t<Table.Cell colspan={row.getAllCells().length}>\n\t\t\t\t\t\t\t\t{@render expandedRow?.(row)}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t{/if}\n\t\t\t\t{:else}\n\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t<Table.Cell colspan={columns.length} class=\"h-24 text-center\">\n\t\t\t\t\t\t\tKeine Daten gefunden\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t{/each}\n\t\t\t</Table.Body>\n\t\t</Table.Root>\n\t</div>\n\n\t{#if enablePagination}\n\t\t{@render Pagination({ table })}\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "data-table.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData, TValue\">\n\timport CirclePlusIcon from \"@lucide/svelte/icons/circle-plus\";\n\timport CheckIcon from \"@lucide/svelte/icons/check\";\n\timport type { Column } from \"@tanstack/table-core\";\n\timport { SvelteSet } from \"svelte/reactivity\";\n\timport * as Command from \"$lib/components/ui/command\";\n\timport * as Popover from \"$lib/components/ui/popover\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport { cn } from \"$UTILS$.js\";\n\timport { Separator } from \"$lib/components/ui/separator\";\n\timport { Badge } from \"$lib/components/ui/badge\";\n\timport type { Component } from \"svelte\";\n\n\tlet {\n\t\tcolumn,\n\t\ttitle,\n\t\toptions,\n\t}: {\n\t\tcolumn: Column<TData, TValue>;\n\t\ttitle: string;\n\t\toptions: {\n\t\t\tlabel: string;\n\t\t\tvalue: string;\n\t\t\ticon?: Component;\n\t\t}[];\n\t} = $props();\n\n\tconst facets = $derived(column?.getFacetedUniqueValues());\n\tconst selectedValues = $derived(new SvelteSet(column?.getFilterValue() as string[]));\n</script>\n\n<Popover.Root>\n\t<Popover.Trigger>\n\t\t{#snippet child({ props })}\n\t\t\t<Button {...props} variant=\"outline\" size=\"sm\" class=\"h-8 border-dashed\">\n\t\t\t\t<CirclePlusIcon />\n\t\t\t\t{title}\n\t\t\t\t{#if selectedValues.size > 0}\n\t\t\t\t\t<Separator orientation=\"vertical\" class=\"mx-2 h-4\" />\n\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal lg:hidden\">\n\t\t\t\t\t\t{selectedValues.size}\n\t\t\t\t\t</Badge>\n\t\t\t\t\t<div class=\"hidden space-x-1 lg:flex\">\n\t\t\t\t\t\t{#if selectedValues.size > 2}\n\t\t\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal\">\n\t\t\t\t\t\t\t\t{selectedValues.size} ausgew√§hlt\n\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t{#each options.filter((opt) => selectedValues.has(opt.value)) as option (option)}\n\t\t\t\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal\">\n\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</Button>\n\t\t{/snippet}\n\t</Popover.Trigger>\n\t<Popover.Content class=\"w-[fit-content] p-0\" align=\"start\">\n\t\t<Command.Root>\n\t\t\t<Command.Input placeholder={title} />\n\t\t\t<Command.List>\n\t\t\t\t<Command.Empty>Keine Ergebnisse</Command.Empty>\n\t\t\t\t<Command.Group>\n\t\t\t\t\t{#each options as option (option)}\n\t\t\t\t\t\t{@const isSelected = selectedValues.has(option.value)}\n\t\t\t\t\t\t<Command.Item\n\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\tif (isSelected) {\n\t\t\t\t\t\t\t\t\tselectedValues.delete(option.value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tselectedValues.add(option.value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst filterValues = Array.from(selectedValues);\n\t\t\t\t\t\t\t\tconsole.log(filterValues);\n\t\t\t\t\t\t\t\tcolumn?.setFilterValue(filterValues.length ? filterValues : undefined);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclass={cn(\n\t\t\t\t\t\t\t\t\t\"border-primary mr-2 flex size-4 items-center justify-center rounded-sm border\",\n\t\t\t\t\t\t\t\t\tisSelected ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CheckIcon class=\"size-4\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{#if option.icon}\n\t\t\t\t\t\t\t\t{@const Icon = option.icon}\n\t\t\t\t\t\t\t\t<Icon class=\"text-muted-foreground\" />\n\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t\t<span>{option.label}</span>\n\t\t\t\t\t\t\t{#if facets?.get(option.value)}\n\t\t\t\t\t\t\t\t<span class=\"ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n\t\t\t\t\t\t\t\t\t{facets.get(option.value)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</Command.Item>\n\t\t\t\t\t{/each}\n\t\t\t\t</Command.Group>\n\t\t\t\t{#if selectedValues.size > 0}\n\t\t\t\t\t<Command.Separator />\n\t\t\t\t\t<Command.Group>\n\t\t\t\t\t\t<Command.Item\n\t\t\t\t\t\t\tonSelect={() => column?.setFilterValue(undefined)}\n\t\t\t\t\t\t\tclass=\"justify-center text-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tFilter l√∂schen\n\t\t\t\t\t\t</Command.Item>\n\t\t\t\t\t</Command.Group>\n\t\t\t\t{/if}\n\t\t\t</Command.List>\n\t\t</Command.Root>\n\t</Popover.Content>\n</Popover.Root>\n",
			"type": "registry:component",
			"target": "data-table-faceted-filter.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport XIcon from \"@lucide/svelte/icons/x\";\n\timport type { Table } from \"@tanstack/table-core\";\n\timport { DataTableFacetedFilter, DataTableViewOptions } from \".\";\n\timport { Button } from \"$lib/components/ui/button\";\n\n\tlet { table }: { table: Table<TData> } = $props();\n\n\tconst isFiltered = $derived(table.getState().columnFilters.length > 0);\n\tconst filterableCols = $derived(\n\t\ttable\n\t\t\t.getHeaderGroups()[0]\n\t\t\t.headers.filter((h) => h.column.columnDef.enableColumnFilter && h.column.getCanFilter())\n\t\t\t.map((h) => h.column)\n\t);\n</script>\n\n<div class=\"flex items-center justify-between\">\n\t<div class=\"flex flex-1 items-center space-x-2\">\n\t\t{#each filterableCols as colFilter}\n\t\t\t<DataTableFacetedFilter\n\t\t\t\tcolumn={colFilter}\n\t\t\t\ttitle={colFilter.columnDef.header ?? colFilter.id}\n\t\t\t\toptions={Array.from(colFilter.getFacetedUniqueValues().keys()).map((v) => ({\n\t\t\t\t\tlabel: v,\n\t\t\t\t\tvalue: v,\n\t\t\t\t}))}\n\t\t\t/>\n\t\t{/each}\n\n\t\t{#if isFiltered}\n\t\t\t<Button variant=\"ghost\" onclick={() => table.resetColumnFilters()} class=\"h-8 px-2 lg:px-3\">\n\t\t\t\tAlle zur√ºcksetzen\n\t\t\t\t<XIcon />\n\t\t\t</Button>\n\t\t{/if}\n\t</div>\n\n\t{#if table\n\t\t.getAllColumns()\n\t\t.filter((col) => col.columnDef.enableHiding && col.getCanHide()).length > 0}\n\t\t<DataTableViewOptions {table} />\n\t{/if}\n</div>\n",
			"type": "registry:component",
			"target": "data-table-toolbar.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport Settings2Icon from \"@lucide/svelte/icons/settings-2\";\n\timport type { Table } from \"@tanstack/table-core\";\n\timport { buttonVariants } from \"$lib/components/ui/button\";\n\timport * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n\n\tlet { table }: { table: Table<TData> } = $props();\n</script>\n\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger\n\t\tclass={buttonVariants({\n\t\t\tvariant: \"outline\",\n\t\t\tsize: \"sm\",\n\t\t\tclass: \"ml-auto hidden h-8 lg:flex\",\n\t\t})}\n\t>\n\t\t<Settings2Icon />\n\t\tDarstellung\n\t</DropdownMenu.Trigger>\n\t<DropdownMenu.Content>\n\t\t<DropdownMenu.Group>\n\t\t\t<DropdownMenu.Label>Eingeblendete Spalten</DropdownMenu.Label>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t{#each table\n\t\t\t\t.getAllColumns()\n\t\t\t\t.filter((col) => col.columnDef.enableHiding && col.getCanHide()) as column (column)}\n\t\t\t\t<DropdownMenu.CheckboxItem\n\t\t\t\t\tbind:checked={() => column.getIsVisible(), (v) => column.toggleVisibility(!!v)}\n\t\t\t\t\tclass=\"capitalize\"\n\t\t\t\t>\n\t\t\t\t\t{column.columnDef.header ?? column.id}\n\t\t\t\t</DropdownMenu.CheckboxItem>\n\t\t\t{/each}\n\t\t</DropdownMenu.Group>\n\t</DropdownMenu.Content>\n</DropdownMenu.Root>\n",
			"type": "registry:component",
			"target": "data-table-view-options.svelte"
		}
	]
}