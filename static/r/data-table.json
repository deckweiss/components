{
	"$schema": "https://shadcn-svelte.com/schema/registry-item.json",
	"name": "data-table",
	"title": "DataTable",
	"type": "registry:block",
	"description": "Fully functional data table with sort, filter, column toggle, row select and pagination",
	"dependencies": [
		"@tanstack/table-core",
		"@lucide/svelte",
		"runed"
	],
	"devDependencies": [
		"@lucide/svelte@^0.515.0",
		"runed@^0.35.1"
	],
	"registryDependencies": [
		"badge",
		"button",
		"checkbox",
		"command",
		"data-table",
		"dropdown-menu",
		"popover",
		"select",
		"table"
	],
	"files": [
		{
			"content": "export { default as DataTableToolbar } from \"./data-table-toolbar.svelte\";\nexport { default as DataTableViewOptions } from \"./data-table-view-options.svelte\";\nexport { default as DataTableFacetedFilter } from \"./data-table-faceted-filter.svelte\";\n",
			"type": "registry:file",
			"target": "blocks/data-table/index.ts"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport {\n\t\ttype ColumnDef,\n\t\ttype ColumnFiltersState,\n\t\ttype PaginationState,\n\t\ttype Row,\n\t\ttype SortingState,\n\t\ttype VisibilityState,\n\t\ttype Table as TableType,\n\t\tgetCoreRowModel,\n\t\tgetFacetedRowModel,\n\t\tgetFacetedUniqueValues,\n\t\tgetFilteredRowModel,\n\t\tgetPaginationRowModel,\n\t\tgetSortedRowModel,\n\t\ttype Column,\n\t\ttype InitialTableState,\n\t\ttype ExpandedState,\n\t\tgetExpandedRowModel,\n\t\ttype ColumnSizingState,\n\t\ttype ColumnSizingInfoState,\n\t} from \"@tanstack/table-core\";\n\timport DataTableToolbar from \"./data-table-toolbar.svelte\";\n\timport { createSvelteTable } from \"$lib/components/ui/data-table/data-table.svelte\";\n\timport FlexRender from \"$lib/components/ui/data-table/flex-render.svelte\";\n\timport * as Table from \"$lib/components/ui/table\";\n\timport * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n\timport { renderComponent, renderSnippet } from \"$lib/components/ui/data-table/render-helpers\";\n\timport { Button, buttonVariants } from \"$lib/components/ui/button\";\n\timport ChevronRightIcon from \"@lucide/svelte/icons/chevron-right\";\n\timport ChevronLeftIcon from \"@lucide/svelte/icons/chevron-left\";\n\timport ChevronsLeftIcon from \"@lucide/svelte/icons/chevrons-left\";\n\timport ChevronsRightIcon from \"@lucide/svelte/icons/chevrons-right\";\n\timport ArrowUpIcon from \"@lucide/svelte/icons/arrow-up\";\n\timport ArrowDownIcon from \"@lucide/svelte/icons/arrow-down\";\n\timport ChevronsUpDownIcon from \"@lucide/svelte/icons/chevrons-up-down\";\n\timport EyeOffIcon from \"@lucide/svelte/icons/eye-off\";\n\timport * as Select from \"$lib/components/ui/select\";\n\timport type { HTMLAttributes } from \"svelte/elements\";\n\timport { cn } from \"$UTILS$.js\";\n\timport Checkbox from \"$lib/components/ui/checkbox/checkbox.svelte\";\n\timport { onMount, untrack, type Snippet } from \"svelte\";\n\timport { Input } from \"$lib/components/ui/input\";\n\timport { PersistedState } from \"runed\";\n\n\tlet {\n\t\tdata,\n\t\tcolumns,\n\t\tonRowClick,\n\t\tinitialState,\n\t\trowSelection = $bindable({}),\n\t\tenableRowSelection = false,\n\t\tenableExpanding = false,\n\t\texpanded = $bindable({}),\n\t\texpandedRow,\n\t\tembeddedInParent = false,\n\t\tenableResizing = false,\n\t\tenablePagination,\n\t\tpagination = $bindable({ pageIndex: 0, pageSize: 10 }),\n\t\tenableSearch = false,\n\t\tcellClasses = \"py-2\",\n\t\trowHighlight,\n\t\tcustomElementsFirst: customElementsFirstSnippet,\n\t\tcustomElementsMiddle: customElementsMiddleSnippet,\n\t\tcustomElementsLast: customElementsLastSnippet,\n\t\tgetColumnIconSnippet,\n\t\tgetRowId,\n\t\tstoragePrefix = \"data-table\",\n\t}: {\n\t\tdata: TData[];\n\t\tcolumns: ColumnDef<TData>[];\n\t\tonRowClick?: (row: Row<TData>) => void;\n\t\tinitialState?: InitialTableState;\n\t\trowSelection?: Record<string, boolean>;\n\t\tenableRowSelection?: boolean;\n\t\tenableExpanding?: boolean;\n\t\texpanded?: ExpandedState;\n\t\texpandedRow?: Snippet<[Row<TData>]>;\n\t\t/**\n\t\t * Fits the table into the parent provided space\n\t\t */\n\t\tembeddedInParent?: boolean;\n\t\tenableResizing?: boolean;\n\t\tenablePagination?: boolean;\n\t\tpagination?: PaginationState;\n\t\tenableSearch?: boolean;\n\t\tcellClasses?: string;\n\t\trowHighlight?: (row: Row<TData>) => string;\n\t\tcustomElementsFirst?: Snippet<[TableType<TData>]>;\n\t\tcustomElementsMiddle?: Snippet<[TableType<TData>]>;\n\t\tcustomElementsLast?: Snippet<[TableType<TData>]>;\n\t\tgetColumnIconSnippet?: (column: any) => Snippet<[{ column: any }]> | undefined;\n\t\tgetRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string;\n\t\tstoragePrefix?: string;\n\t} = $props();\n\n\tlet columnVisibility = new PersistedState<VisibilityState>(\n\t\t`${storagePrefix}.columnVisibility`,\n\t\t{}\n\t);\n\tlet columnFilters = $state<ColumnFiltersState>([]);\n\tlet sorting = $state<SortingState>(initialState?.sorting ?? []);\n\tlet globalFilter = $state<any>(null);\n\tlet columnSizing = new PersistedState<ColumnSizingState>(`${storagePrefix}.columnSizing`, {});\n\tlet columnSizingInfo = $state<ColumnSizingInfoState>({});\n\tlet tableContainerRef = $state<HTMLDivElement | null>(null);\n\n\tconst table = createSvelteTable({\n\t\tget data() {\n\t\t\treturn data;\n\t\t},\n\t\tstate: {\n\t\t\tget globalFilter() {\n\t\t\t\treturn globalFilter;\n\t\t\t},\n\t\t\tget sorting() {\n\t\t\t\treturn sorting;\n\t\t\t},\n\t\t\tget columnVisibility() {\n\t\t\t\treturn columnVisibility.current;\n\t\t\t},\n\t\t\tget rowSelection() {\n\t\t\t\treturn rowSelection;\n\t\t\t},\n\t\t\tget columnFilters() {\n\t\t\t\treturn columnFilters;\n\t\t\t},\n\t\t\tget pagination() {\n\t\t\t\treturn enablePagination ? pagination : { pageIndex: 0, pageSize: Infinity };\n\t\t\t},\n\t\t\tget expanded() {\n\t\t\t\treturn expanded;\n\t\t\t},\n\t\t\tget columnSizing() {\n\t\t\t\treturn columnSizing.current;\n\t\t\t},\n\t\t\tget columnSizingInfo() {\n\t\t\t\treturn columnSizingInfo;\n\t\t\t},\n\t\t},\n\t\tgetRowId,\n\t\tcolumnResizeMode: \"onChange\",\n\t\tinitialState,\n\t\tenableExpanding,\n\t\tglobalFilterFn: \"includesString\",\n\t\tonGlobalFilterChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tglobalFilter = updater(globalFilter);\n\t\t\t} else {\n\t\t\t\tglobalFilter = updater;\n\t\t\t}\n\t\t},\n\t\tcolumns: enableRowSelection\n\t\t\t? [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: \"select\",\n\t\t\t\t\t\theader: ({ table }) =>\n\t\t\t\t\t\t\trenderComponent(Checkbox, {\n\t\t\t\t\t\t\t\tchecked: table.getIsAllPageRowsSelected(),\n\t\t\t\t\t\t\t\tonCheckedChange: (value) => table.toggleAllPageRowsSelected(value),\n\t\t\t\t\t\t\t\tindeterminate:\n\t\t\t\t\t\t\t\t\ttable.getIsSomePageRowsSelected() && !table.getIsAllPageRowsSelected(),\n\t\t\t\t\t\t\t\t\"aria-label\": \"Select all\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tcell: ({ row }) =>\n\t\t\t\t\t\t\trenderComponent(Checkbox, {\n\t\t\t\t\t\t\t\tchecked: row.getIsSelected(),\n\t\t\t\t\t\t\t\tonclick: (event) => {\n\t\t\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tonCheckedChange: (value) => row.toggleSelected(value),\n\t\t\t\t\t\t\t\t\"aria-label\": \"Select row\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\tenableSorting: false,\n\t\t\t\t\t\tenableHiding: false,\n\t\t\t\t\t},\n\t\t\t\t\t...columns,\n\t\t\t\t]\n\t\t\t: columns,\n\t\tenableRowSelection,\n\t\tonExpandedChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\texpanded = updater(expanded);\n\t\t\t} else {\n\t\t\t\texpanded = updater;\n\t\t\t}\n\t\t},\n\t\tonRowSelectionChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\trowSelection = updater(rowSelection);\n\t\t\t} else {\n\t\t\t\trowSelection = updater;\n\t\t\t}\n\t\t},\n\t\tonSortingChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tsorting = updater(sorting);\n\t\t\t} else {\n\t\t\t\tsorting = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnFiltersChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnFilters = updater(columnFilters);\n\t\t\t} else {\n\t\t\t\tcolumnFilters = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnVisibilityChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnVisibility.current = updater(columnVisibility.current);\n\t\t\t} else {\n\t\t\t\tcolumnVisibility.current = updater;\n\t\t\t}\n\t\t},\n\t\tonPaginationChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tpagination = updater(pagination);\n\t\t\t} else {\n\t\t\t\tpagination = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnSizingChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnSizing.current = updater(columnSizing.current);\n\t\t\t} else {\n\t\t\t\tcolumnSizing.current = updater;\n\t\t\t}\n\t\t},\n\t\tonColumnSizingInfoChange: (updater) => {\n\t\t\tif (typeof updater === \"function\") {\n\t\t\t\tcolumnSizingInfo = updater(columnSizingInfo);\n\t\t\t} else {\n\t\t\t\tcolumnSizingInfo = updater;\n\t\t\t}\n\t\t},\n\t\tautoResetPageIndex: false,\n\t\tgetCoreRowModel: getCoreRowModel(),\n\t\tgetFilteredRowModel: getFilteredRowModel(),\n\t\tgetPaginationRowModel: enablePagination ? getPaginationRowModel() : undefined,\n\t\tgetSortedRowModel: getSortedRowModel(),\n\t\tgetFacetedRowModel: getFacetedRowModel(),\n\t\tgetFacetedUniqueValues: getFacetedUniqueValues(),\n\t\tgetExpandedRowModel: getExpandedRowModel(),\n\t\t// Performance optimizations\n\t\tenableColumnResizing: enableResizing,\n\t\tenableMultiSort: false,\n\t});\n\tlet columnSizeVars = $derived.by(() => {\n\t\tconst headers = untrack(() => table.getFlatHeaders());\n\t\tconst sizingInfo = columnSizingInfo;\n\t\tconst sizing = columnSizing.current;\n\t\tconst colSizes: { [key: string]: number } = {};\n\t\tfor (let i = 0; i < headers.length; i++) {\n\t\t\tconst header = headers[i]!;\n\t\t\tcolSizes[`--header-${header.id}-size`] = header.getSize();\n\t\t\tcolSizes[`--col-${header.column.id}-size`] = header.column.getSize();\n\t\t}\n\t\treturn Object.entries(colSizes)\n\t\t\t.map(([key, value]) => `${key}: ${value};`)\n\t\t\t.join(\" \");\n\t});\n\n\t//reset page when filters change\n\tlet previousFilterState = $state<string>(\"\");\n\t$effect(() => {\n\t\tconst currentFilterState = JSON.stringify({ globalFilter, columnFilters });\n\t\tif (previousFilterState && previousFilterState !== currentFilterState) {\n\t\t\tpagination = { ...pagination, pageIndex: 0 };\n\t\t}\n\t\tpreviousFilterState = currentFilterState;\n\t});\n\n\tconst rows = $derived(table.getRowModel().rows);\n\tconst headerGroups = $derived(table.getHeaderGroups());\n\n\t//progressive rendering: render rows in batches\n\tlet visibleRowsCount = $state(0);\n\tconst BATCH_SIZE = 3;\n\n\t$effect(() => {\n\t\tvisibleRowsCount = Math.min(BATCH_SIZE, rows.length);\n\t});\n\n\t$effect(() => {\n\t\tif (visibleRowsCount < rows.length) {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tvisibleRowsCount = Math.min(visibleRowsCount + BATCH_SIZE, rows.length);\n\t\t\t}, 0);\n\t\t\treturn () => clearTimeout(timer);\n\t\t}\n\t});\n\n\tconst visibleRows = $derived(rows.slice(0, visibleRowsCount));\n\n\tonMount(() => {\n\t\t// if enableResizing, set the last column size to the remaining width of the container\n\t\tif (enableResizing && table.getAllColumns().length > 0) {\n\t\t\tconst containerRect = tableContainerRef?.getBoundingClientRect();\n\t\t\tif (containerRect && containerRect.width > table.getCenterTotalSize()) {\n\t\t\t\tconst lastColumnId = table.getAllColumns()[table.getAllColumns().length - 1].id;\n\t\t\t\ttable.setColumnSizing({\n\t\t\t\t\t...columnSizing,\n\t\t\t\t\t[lastColumnId]:\n\t\t\t\t\t\tcontainerRect.width -\n\t\t\t\t\t\ttable.getCenterTotalSize() +\n\t\t\t\t\t\ttable.getColumn(lastColumnId).getSize(),\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n{#snippet Pagination({ table }: { table: TableType<TData> })}\n\t<div class=\"flex items-center justify-between px-2\">\n\t\t<div class=\"text-muted-foreground flex-1 text-sm\">\n\t\t\t{#if table.options.enableRowSelection}\n\t\t\t\t{table.getFilteredSelectedRowModel().rows.length} von\n\t\t\t\t{table.getFilteredRowModel().rows.length} Zeile(n) ausgewählt\n\t\t\t{/if}\n\t\t</div>\n\t\t<div class=\"flex items-center space-x-6 lg:space-x-8\">\n\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t<p class=\"text-sm font-medium\">Zeilen pro Seite</p>\n\t\t\t\t<Select.Root\n\t\t\t\t\tallowDeselect={false}\n\t\t\t\t\ttype=\"single\"\n\t\t\t\t\tvalue={`${table.getState().pagination.pageSize}`}\n\t\t\t\t\tonValueChange={(value) => {\n\t\t\t\t\t\ttable.setPageSize(Number(value));\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Select.Trigger class=\"h-8 w-[70px]\">\n\t\t\t\t\t\t{String(table.getState().pagination.pageSize)}\n\t\t\t\t\t</Select.Trigger>\n\t\t\t\t\t<Select.Content side=\"top\">\n\t\t\t\t\t\t{#each [10, 20, 30, 40, 50] as pageSize (pageSize)}\n\t\t\t\t\t\t\t<Select.Item value={`${pageSize}`}>\n\t\t\t\t\t\t\t\t{pageSize}\n\t\t\t\t\t\t\t</Select.Item>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</Select.Content>\n\t\t\t\t</Select.Root>\n\t\t\t</div>\n\t\t\t<div class=\"flex w-[100px] items-center justify-center text-sm font-medium whitespace-nowrap\">\n\t\t\t\tSeite {table.getState().pagination.pageIndex + 1} von\n\t\t\t\t{table.getPageCount()}\n\t\t\t</div>\n\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\t\tonclick={() => table.setPageIndex(0)}\n\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to first page</span>\n\t\t\t\t\t<ChevronsLeftIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\t\tonclick={() => table.previousPage()}\n\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to previous page</span>\n\t\t\t\t\t<ChevronLeftIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"size-8 p-0\"\n\t\t\t\t\tonclick={() => table.nextPage()}\n\t\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to next page</span>\n\t\t\t\t\t<ChevronRightIcon />\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclass=\"hidden size-8 p-0 lg:flex\"\n\t\t\t\t\tonclick={() => table.setPageIndex(table.getPageCount() - 1)}\n\t\t\t\t\tdisabled={!table.getCanNextPage()}\n\t\t\t\t>\n\t\t\t\t\t<span class=\"sr-only\">Go to last page</span>\n\t\t\t\t\t<ChevronsRightIcon />\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n{/snippet}\n\n{#snippet ColumnHeader({\n\tcolumn,\n\ttitle,\n\tclass: className,\n\t...restProps\n}: { column: Column<TData>; title: string } & HTMLAttributes<HTMLDivElement>)}\n\t{#if !((column.columnDef.enableSorting && column?.getCanSort()) || (column.getCanHide() && column.columnDef.enableHiding))}\n\t\t<div class={className} {...restProps}>\n\t\t\t{title}\n\t\t</div>\n\t{:else}\n\t\t<div class={cn(\"flex items-center\", className)} {...restProps}>\n\t\t\t<DropdownMenu.Root>\n\t\t\t\t<DropdownMenu.Trigger class={buttonVariants({ size: \"sm\", variant: \"ghost\" })}\n\t\t\t\t\t>{#snippet children()}\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{#if column.getIsSorted() === \"desc\"}\n\t\t\t\t\t\t\t<ArrowDownIcon />\n\t\t\t\t\t\t{:else if column.getIsSorted() === \"asc\"}\n\t\t\t\t\t\t\t<ArrowUpIcon />\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t<ChevronsUpDownIcon />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{/snippet}\n\t\t\t\t</DropdownMenu.Trigger>\n\t\t\t\t<DropdownMenu.Content align=\"start\">\n\t\t\t\t\t{#if column.columnDef.enableSorting && column.getCanSort()}\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleSorting(false)}>\n\t\t\t\t\t\t\t<ArrowUpIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAufsteigend\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleSorting(true)}>\n\t\t\t\t\t\t\t<ArrowDownIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAbsteigend\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if column.columnDef.enableSorting && column.getCanSort() && column.columnDef.enableHiding && column.getCanHide()}\n\t\t\t\t\t\t<DropdownMenu.Separator />\n\t\t\t\t\t{/if}\n\n\t\t\t\t\t{#if column.columnDef.enableHiding && column.getCanHide()}\n\t\t\t\t\t\t<DropdownMenu.Item onclick={() => column.toggleVisibility(false)}>\n\t\t\t\t\t\t\t<EyeOffIcon class=\"text-muted-foreground/70 mr-2 size-3.5\" />\n\t\t\t\t\t\t\tAusblenden\n\t\t\t\t\t\t</DropdownMenu.Item>\n\t\t\t\t\t{/if}\n\t\t\t\t</DropdownMenu.Content>\n\t\t\t</DropdownMenu.Root>\n\t\t</div>\n\t{/if}\n{/snippet}\n\n<div\n\tclass={cn(\"space-y-4\", embeddedInParent ? \"flex h-full flex-col\" : \"\")}\n\tbind:this={tableContainerRef}\n>\n\t<DataTableToolbar {table} {getColumnIconSnippet}>\n\t\t{#snippet customElementsFirst(table)}\n\t\t\t{#if customElementsFirstSnippet}\n\t\t\t\t{@render customElementsFirstSnippet?.(table)}\n\t\t\t{/if}\n\t\t{/snippet}\n\t\t{#snippet customElementsMiddle(table)}\n\t\t\t{#if customElementsMiddleSnippet}\n\t\t\t\t{@render customElementsMiddleSnippet?.(table)}\n\t\t\t{/if}\n\t\t{/snippet}\n\t\t{#snippet customElementsLast(table)}\n\t\t\t{#if enableSearch}\n\t\t\t\t<div class=\"w-full max-w-sm\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"Suche...\"\n\t\t\t\t\t\toninput={(e) => table.setGlobalFilter(e.currentTarget.value)}\n\t\t\t\t\t\tonchange={(e) => {\n\t\t\t\t\t\t\ttable.setGlobalFilter(e.currentTarget.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclass=\"h-[32px]\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t{/snippet}\n\t</DataTableToolbar>\n\n\t<div class={cn(\"rounded-md border\", embeddedInParent ? \"relative flex-1 overflow-hidden\" : \"\")}>\n\t\t<div class={cn(\"overflow-x-auto\", embeddedInParent ? \"absolute inset-0 overflow-y-auto\" : \"\")}>\n\t\t\t<Table.Root\n\t\t\t\tclass={cn(enableResizing ? \"table-fixed\" : \"\")}\n\t\t\t\tstyle={enableResizing ? columnSizeVars + `width: ${table.getCenterTotalSize()}px;` : \"\"}\n\t\t\t>\n\t\t\t\t<Table.Header class={cn(\"bg-background\", embeddedInParent ? \"sticky top-0 z-10\" : \"\")}>\n\t\t\t\t\t{#each headerGroups as headerGroup (headerGroup.id)}\n\t\t\t\t\t\t{@const visibleHeaders = headerGroup.headers.filter(\n\t\t\t\t\t\t\t(header) => !header.column.columnDef.meta?.hidden\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t{#each visibleHeaders as header (header.id)}\n\t\t\t\t\t\t\t\t<Table.Head\n\t\t\t\t\t\t\t\t\tcolspan={header.colSpan}\n\t\t\t\t\t\t\t\t\tclass={cn(\"\", enableResizing ? \"relative border-l first:border-l-0\" : \"\")}\n\t\t\t\t\t\t\t\t\tstyle={enableResizing\n\t\t\t\t\t\t\t\t\t\t? `width: calc(var(--header-${header.id}-size) * 1px);`\n\t\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{#if !header.isPlaceholder}\n\t\t\t\t\t\t\t\t\t\t{#if header.column.columnDef.header instanceof Function}\n\t\t\t\t\t\t\t\t\t\t\t<FlexRender\n\t\t\t\t\t\t\t\t\t\t\t\tcontent={header.column.columnDef.header}\n\t\t\t\t\t\t\t\t\t\t\t\tcontext={header.getContext()}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t\t\t\t\t<FlexRender\n\t\t\t\t\t\t\t\t\t\t\t\tcontent={() =>\n\t\t\t\t\t\t\t\t\t\t\t\t\trenderSnippet(ColumnHeader, {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumn: header.column,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle: header.column.columnDef.header as string,\n\t\t\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\tcontext={header.getContext()}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t{#if enableResizing}\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tondblclick={() => header.column.resetSize()}\n\t\t\t\t\t\t\t\t\t\t\t\tonmousedown={header.getResizeHandler()}\n\t\t\t\t\t\t\t\t\t\t\t\tontouchstart={header.getResizeHandler()}\n\t\t\t\t\t\t\t\t\t\t\t\tclass={`resizer ${\n\t\t\t\t\t\t\t\t\t\t\t\t\ttable.options.columnResizeDirection\n\t\t\t\t\t\t\t\t\t\t\t\t} ${header.column.getIsResizing() ? \"isResizing\" : \"\"}`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"sr-only\">Resize column</span>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t</Table.Head>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t{/each}\n\t\t\t\t</Table.Header>\n\t\t\t\t<Table.Body>\n\t\t\t\t\t{#each visibleRows as row (row.id)}\n\t\t\t\t\t\t{@const visibleCells = row\n\t\t\t\t\t\t\t.getVisibleCells()\n\t\t\t\t\t\t\t.filter((cell) => !cell.column.columnDef.meta?.hidden)}\n\t\t\t\t\t\t<Table.Row\n\t\t\t\t\t\t\tclass={cn(onRowClick ? \"cursor-pointer\" : \"\", rowHighlight?.(row) || \"\")}\n\t\t\t\t\t\t\tonclick={() => {\n\t\t\t\t\t\t\t\tonRowClick?.(row);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tdata-state={row.getIsSelected() && \"selected\"}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{#each visibleCells as cell (cell.id)}\n\t\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\t\tclass={cellClasses}\n\t\t\t\t\t\t\t\t\tstyle={enableResizing\n\t\t\t\t\t\t\t\t\t\t? `width: calc(var(--col-${cell.column.id}-size) * 1px);`\n\t\t\t\t\t\t\t\t\t\t: \"\"}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FlexRender content={cell.column.columnDef.cell} context={cell.getContext()} />\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</Table.Row>\n\n\t\t\t\t\t\t{#if row.getIsExpanded()}\n\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t<Table.Cell colspan={row.getAllCells().length}>\n\t\t\t\t\t\t\t\t\t{@render expandedRow?.(row)}\n\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t<Table.Cell colspan={columns.length} class=\"h-24 text-center\">\n\t\t\t\t\t\t\t\tKeine Daten gefunden\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t{/each}\n\n\t\t\t\t\t{#if visibleRowsCount < rows.length}\n\t\t\t\t\t\t{#each Array(rows.length - visibleRowsCount) as _, i (i + visibleRowsCount)}\n\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t{#each headerGroups[0]?.headers.filter((h) => !h.column.columnDef.meta?.hidden) || [] as header}\n\t\t\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\t\t\tclass={cellClasses}\n\t\t\t\t\t\t\t\t\t\tstyle={enableResizing ? `width: calc(var(--col-${header.id}-size) * 1px);` : \"\"}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<div class=\"bg-muted h-4 w-3/4 rounded\"></div>\n\t\t\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t{/if}\n\t\t\t\t</Table.Body>\n\t\t\t</Table.Root>\n\t\t</div>\n\t</div>\n\n\t{#if enablePagination}\n\t\t{@render Pagination({ table })}\n\t{/if}\n</div>\n\n<style>\n\t.resizer {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\theight: 100%;\n\t\twidth: 5px;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tcursor: col-resize;\n\t\tuser-select: none;\n\t\ttouch-action: none;\n\t}\n\n\t.resizer.ltr {\n\t\tright: 0;\n\t}\n\n\t.resizer.rtl {\n\t\tleft: 0;\n\t}\n\n\t.resizer.isResizing {\n\t\tbackground: blue;\n\t\topacity: 1;\n\t}\n\n\t.resizer {\n\t\topacity: 0;\n\t}\n\n\t:global(*:hover > .resizer) {\n\t\topacity: 1;\n\t}\n</style>\n",
			"type": "registry:component",
			"target": "blocks/data-table/data-table.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData, TValue\">\n\timport CirclePlusIcon from \"@lucide/svelte/icons/circle-plus\";\n\timport CheckIcon from \"@lucide/svelte/icons/check\";\n\timport type { Column } from \"@tanstack/table-core\";\n\timport { SvelteSet } from \"svelte/reactivity\";\n\timport * as Command from \"$lib/components/ui/command\";\n\timport * as Popover from \"$lib/components/ui/popover\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport { cn } from \"$UTILS$.js\";\n\timport { Separator } from \"$lib/components/ui/separator\";\n\timport { Badge } from \"$lib/components/ui/badge\";\n\timport type { Component, Snippet } from \"svelte\";\n\n\tlet {\n\t\tcolumn,\n\t\ttitle,\n\t\toptions,\n\t\ticonSnippet,\n\t}: {\n\t\tcolumn: Column<TData, TValue>;\n\t\ttitle: string;\n\t\toptions: {\n\t\t\tlabel: string;\n\t\t\tvalue: string;\n\t\t\ticon?: Component;\n\t\t}[];\n\t\ticonSnippet?: Snippet<[{ column: Column<TData, TValue> }]>;\n\t} = $props();\n\n\tconst facets = $derived(column?.getFacetedUniqueValues());\n\tconst selectedValues = $derived(new SvelteSet(column?.getFilterValue() as string[]));\n</script>\n\n<Popover.Root>\n\t<Popover.Trigger>\n\t\t{#snippet child({ props })}\n\t\t\t<Button {...props} variant=\"outline\" size=\"sm\" class=\"h-8 border-dashed\">\n\t\t\t\t<CirclePlusIcon />\n\t\t\t\t{title}\n\t\t\t\t{#if iconSnippet}\n\t\t\t\t\t{@render iconSnippet({ column })}\n\t\t\t\t{/if}\n\t\t\t\t{#if selectedValues.size > 0}\n\t\t\t\t\t<Separator orientation=\"vertical\" class=\"mx-2 h-4\" />\n\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal lg:hidden\">\n\t\t\t\t\t\t{selectedValues.size}\n\t\t\t\t\t</Badge>\n\t\t\t\t\t<div class=\"hidden space-x-1 lg:flex\">\n\t\t\t\t\t\t{#if selectedValues.size > 2}\n\t\t\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal\">\n\t\t\t\t\t\t\t\t{selectedValues.size} ausgewählt\n\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t{:else}\n\t\t\t\t\t\t\t{#each options.filter((opt) => selectedValues.has(opt.value)) as option (option)}\n\t\t\t\t\t\t\t\t<Badge variant=\"secondary\" class=\"rounded-sm px-1 font-normal\">\n\t\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t</Badge>\n\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t</Button>\n\t\t{/snippet}\n\t</Popover.Trigger>\n\t<Popover.Content class=\"w-fit p-0\" align=\"start\">\n\t\t<Command.Root>\n\t\t\t<Command.Input placeholder={title} />\n\t\t\t<Command.List>\n\t\t\t\t<Command.Empty>Keine Ergebnisse</Command.Empty>\n\t\t\t\t<Command.Group>\n\t\t\t\t\t{#each options as option (option)}\n\t\t\t\t\t\t{@const isSelected = selectedValues.has(option.value)}\n\t\t\t\t\t\t<Command.Item\n\t\t\t\t\t\t\tonSelect={() => {\n\t\t\t\t\t\t\t\tif (isSelected) {\n\t\t\t\t\t\t\t\t\tselectedValues.delete(option.value);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tselectedValues.add(option.value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst filterValues = Array.from(selectedValues);\n\t\t\t\t\t\t\t\tcolumn?.setFilterValue(filterValues.length ? filterValues : undefined);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclass={cn(\n\t\t\t\t\t\t\t\t\t\"border-primary mr-2 flex size-4 items-center justify-center rounded-sm border\",\n\t\t\t\t\t\t\t\t\tisSelected ? \"bg-primary text-primary-foreground\" : \"opacity-50 [&_svg]:invisible\"\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CheckIcon class=\"size-4\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{#if option.icon}\n\t\t\t\t\t\t\t\t{@const Icon = option.icon}\n\t\t\t\t\t\t\t\t<Icon class=\"text-muted-foreground\" />\n\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t\t<span>{option.label}</span>\n\n\t\t\t\t\t\t\t{#if facets?.get(option.value)}\n\t\t\t\t\t\t\t\t<span class=\"ml-auto flex size-4 items-center justify-center font-mono text-xs\">\n\t\t\t\t\t\t\t\t\t{facets.get(option.value)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t</Command.Item>\n\t\t\t\t\t{/each}\n\t\t\t\t</Command.Group>\n\t\t\t\t{#if selectedValues.size > 0}\n\t\t\t\t\t<Command.Separator />\n\t\t\t\t\t<Command.Group>\n\t\t\t\t\t\t<Command.Item\n\t\t\t\t\t\t\tonSelect={() => column?.setFilterValue(undefined)}\n\t\t\t\t\t\t\tclass=\"justify-center text-center\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tFilter löschen\n\t\t\t\t\t\t</Command.Item>\n\t\t\t\t\t</Command.Group>\n\t\t\t\t{/if}\n\t\t\t</Command.List>\n\t\t</Command.Root>\n\t</Popover.Content>\n</Popover.Root>\n",
			"type": "registry:component",
			"target": "blocks/data-table/data-table-faceted-filter.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport XIcon from \"@lucide/svelte/icons/x\";\n\timport type { Table } from \"@tanstack/table-core\";\n\timport { DataTableFacetedFilter, DataTableViewOptions } from \".\";\n\timport { Button } from \"$lib/components/ui/button\";\n\timport type { Snippet } from \"svelte\";\n\n\tlet {\n\t\ttable,\n\t\tcustomElementsFirst,\n\t\tcustomElementsLast,\n\t\tcustomElementsMiddle,\n\t\tgetColumnIconSnippet,\n\t}: {\n\t\ttable: Table<TData>;\n\t\tcustomElementsFirst?: Snippet<[Table<TData>]>;\n\t\tcustomElementsLast?: Snippet<[Table<TData>]>;\n\t\tcustomElementsMiddle?: Snippet<[Table<TData>]>;\n\t\tgetColumnIconSnippet?: (column: any) => Snippet<[{ column: any }]> | undefined;\n\t} = $props();\n\n\tconst isFiltered = $derived(table.getState().columnFilters.length > 0);\n\tconst filterableCols = $derived(\n\t\ttable\n\t\t\t.getHeaderGroups()[0]\n\t\t\t.headers.filter((h) => h.column.columnDef.enableColumnFilter && h.column.getCanFilter())\n\t\t\t.map((h) => h.column)\n\t);\n</script>\n\n<div class=\"flex items-center justify-between\">\n\t<div class=\"flex flex-1 items-center space-x-2\">\n\t\t{#each filterableCols as colFilter}\n\t\t\t<DataTableFacetedFilter\n\t\t\t\tcolumn={colFilter}\n\t\t\t\ttitle={colFilter.columnDef.header ?? colFilter.id}\n\t\t\t\toptions={Array.from(colFilter.getFacetedUniqueValues().keys()).map((v) => ({\n\t\t\t\t\tlabel: v,\n\t\t\t\t\tvalue: v,\n\t\t\t\t}))}\n\t\t\t\ticonSnippet={getColumnIconSnippet?.(colFilter)}\n\t\t\t/>\n\t\t{/each}\n\n\t\t{#if customElementsMiddle}\n\t\t\t{@render customElementsMiddle?.(table)}\n\t\t{/if}\n\n\t\t{#if isFiltered}\n\t\t\t<Button variant=\"ghost\" onclick={() => table.resetColumnFilters()} class=\"h-8 px-2 lg:px-3\">\n\t\t\t\tAlle zurücksetzen\n\t\t\t\t<XIcon />\n\t\t\t</Button>\n\t\t{/if}\n\t</div>\n\t<div class=\"ml-2 flex flex-1 items-center justify-end gap-2\">\n\t\t{@render customElementsLast?.(table)}\n\n\t\t{#if table\n\t\t\t.getAllColumns()\n\t\t\t.filter((col) => col.columnDef.enableHiding && col.getCanHide()).length > 0}\n\t\t\t<DataTableViewOptions {table} />\n\t\t{/if}\n\t</div>\n</div>\n",
			"type": "registry:component",
			"target": "blocks/data-table/data-table-toolbar.svelte"
		},
		{
			"content": "<script lang=\"ts\" generics=\"TData\">\n\timport Settings2Icon from \"@lucide/svelte/icons/settings-2\";\n\timport type { Table } from \"@tanstack/table-core\";\n\timport { buttonVariants } from \"$lib/components/ui/button\";\n\timport * as DropdownMenu from \"$lib/components/ui/dropdown-menu\";\n\n\tlet { table }: { table: Table<TData> } = $props();\n</script>\n\n<DropdownMenu.Root>\n\t<DropdownMenu.Trigger\n\t\tclass={buttonVariants({\n\t\t\tvariant: \"outline\",\n\t\t\tsize: \"sm\",\n\t\t\tclass: \"hidden h-8 lg:flex\",\n\t\t})}\n\t>\n\t\t<Settings2Icon />\n\t\tDarstellung\n\t</DropdownMenu.Trigger>\n\t<DropdownMenu.Content>\n\t\t<DropdownMenu.Group>\n\t\t\t<DropdownMenu.Label>Eingeblendete Spalten</DropdownMenu.Label>\n\t\t\t<DropdownMenu.Separator />\n\t\t\t{#each table\n\t\t\t\t.getAllColumns()\n\t\t\t\t.filter((col) => col.columnDef.enableHiding && col.getCanHide()) as column (column)}\n\t\t\t\t<DropdownMenu.CheckboxItem\n\t\t\t\t\tbind:checked={() => column.getIsVisible(), (v) => column.toggleVisibility(!!v)}\n\t\t\t\t>\n\t\t\t\t\t{column.columnDef.header ?? column.id}\n\t\t\t\t</DropdownMenu.CheckboxItem>\n\t\t\t{/each}\n\t\t</DropdownMenu.Group>\n\t</DropdownMenu.Content>\n</DropdownMenu.Root>\n",
			"type": "registry:component",
			"target": "blocks/data-table/data-table-view-options.svelte"
		}
	]
}